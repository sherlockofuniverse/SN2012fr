# -*- coding: utf-8 -*-
"""SN2012fr.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_hPaeufRJuIXjbi4KQKUze4LR7kNvthU
"""

# Commented out IPython magic to ensure Python compatibility.
#importing required libraries
import math 
import matplotlib.pyplot as plt
import numpy as np
# %matplotlib inline

#creating arrays to store magnitude data
u = [14.975, 14.220, 13.688, 13.351, 13.061, 12.901, 12.758, 12.594,
12.564, 12.559, 12.582, 12.621, 12.649, 12.687, 12.734, 12.776, 12.833,
12.890, 12.967, 13.053, 13.125, 13.222, 13.329, 13.434, 13.537, 13.655,
13.765, 13.884, 14.096, 14.240, 14.334, 14.445, 14.523, 14.630, 14.726,
14.816, 14.912, 14.985, 15.065, 15.125, 15.209, 15.284, 15.341, 15.409,
15.520, 15.581, 15.617, 15.648, 15.683, 15.736, 15.754, 15.806, 15.820,
15.860, 15.877, 15.950, 15.944, 15.958, 15.963, 15.988, 16.010, 16.041,
16.134, 16.188, 16.253 ,16.289, 16.297, 16.351, 16.369, 16.420, 16.439,
16.470, 16.472, 16.492, 16.532, 16.540, 16.544, 16.588, 16.602, 16.620,
16.651, 16.663, 16.758, 16.794, 16.840, 16.922, 17.012, 17.088, 17.163,
17.242, 17.300, 17.396, 17.449, 17.506, 17.500, 17.524, 17.551, 17.683,
17.724, 0, 17.852, 17.933, 18.100, 0, 0 ]

g = [13.952, 13.458, 13.098, 12.841, 0, 12.450, 12.312, 0, 12.058, 12.001,
11.994, 11.985, 11.988, 12.004, 12.010, 12.044, 12.072, 12.109, 12.153,
12.213, 12.269, 12.324, 12.370, 12.464, 12.528, 12.612, 12.692, 12.749,
12.890, 12.959, 13.022, 13.114, 13.171, 13.234, 13.308, 13.382, 13.451,
13.518, 13.590, 13.674, 13.731, 13.806, 13.880, 13.966, 14.104, 14.165,
14.229, 14.275, 14.330, 14.384, 14.423, 14.466, 14.492, 14.548, 14.574,
14.642, 14.656, 14.687, 14.692, 14.718, 14.738, 14.774, 14.881, 14.928,
14.982, 15.039, 15.057, 15.066, 15.085, 15.131, 15.152, 15.153, 15.178,
15.198, 15.214, 15.231, 15.255, 15.269, 15.279, 15.296, 15.313, 15.324,
15.389, 15.420, 15.464, 15.507, 15.535, 15.627, 15.676, 15.736, 15.772,
15.838, 15.870, 15.894, 15.909, 15.919, 15.942, 16.010, 16.049, 16.102,
16.141, 16.181, 16.336, 16.392, 16.524 ]

r = [14.079, 13.609, 13.248, 13.022, 12.778, 12.647, 12.515, 12.298,
12.248, 12.149, 12.107, 12.084, 12.075, 12.061, 12.093, 12.096, 12.116,
12.148, 12.227, 12.253, 12.322, 12.387, 12.456, 12.554, 12.623, 12.682,
12.755, 12.808, 12.874, 12.901, 12.916, 12.920, 12.921, 12.922, 12.915,
12.926, 12.930, 12.946, 12.950, 12.983, 12.995, 13.034, 13.082, 13.141,
13.244, 13.334, 13.409, 13.456, 13.539, 13.595, 13.645, 13.698, 13.745,
13.816, 13.846, 13.960, 14.005, 14.040, 14.070, 14.088, 14.136, 14.207,
14.398, 14.496, 14.588, 14.682, 14.718, 14.743, 14.769, 14.866, 14.894,
14.920, 14.947, 14.997, 15.023, 15.057, 15.093, 15.117, 15.134, 15.188,
15.206, 15.238, 15.353, 15.409, 15.466, 15.559, 15.657, 15.793, 15.897,
15.990, 16.058, 16.177, 16.227, 16.274, 16.305, 16.345, 16.395, 16.518,
16.575, 16.666, 16.748, 16.830, 17.085, 17.195, 17.405 ]

i = [14.576, 14.028, 13.646, 13.369, 13.136, 13.026, 12.941, 12.867,
12.843, 12.842, 12.851, 12.888, 12.913, 12.920, 12.946, 12.966, 13.043,
13.060, 13.094, 13.164, 13.214, 13.310, 13.378, 13.475, 13.571, 13.658,
13.712, 13.732, 13.747, 13.759, 13.714, 13.683, 13.648, 13.632, 13.579,
13.554, 13.518, 13.470, 13.429, 13.4421, 13.411, 13.374, 13.375, 13.388,
13.477, 13.546, 13.633, 13.694, 13.789, 13.850, 13.910, 13.960, 14.009,
14.127, 14.158, 14.299, 14.348, 14.407, 14.435, 14.476, 14.518, 14.608,
14.840, 14.940, 15.059, 15.176, 15.239, 15.247, 15.265, 15.367, 15.418,
15.432, 15.480, 15.515, 15.531, 15.574, 15.626, 15.663, 15.681, 15.709,
0, 15.779, 15.895, 15.941, 16.012, 16.099, 16.193, 16.349, 16.430, 16.543,
16.605, 16.740, 16.748, 16.799, 16.822, 16.881, 16.904, 17.021, 17.051,
17.142, 17.206, 17.279, 17.474, 17.573, 0 ]

B = [14.066, 13.524, 13.126, 12.846, 12.621, 12.465, 12.333, 12.113, 
12.109, 12.021, 12.051, 12.018, 12.060, 12.057, 12.102, 12.140, 12.168, 
12.237, 12.294, 12.342, 12.416, 12.480, 12.544, 12.646, 12.745, 12.835, 
12.891, 13.000, 13.174, 13.268, 13.392, 13.464, 13.543, 13.642, 13.579,
13.554, 13.518, 13.470, 13.429, 13.4421, 13.411, 13.374, 13.375, 13.388,
13.477, 13.546, 13.633, 13.694, 13.789, 13.850, 13.910, 13.960, 14.009,
14.127, 14.158, 14.299, 14.348, 14.407, 14.435, 14.476, 14.518, 14.608,
14.840, 14.940, 15.059, 15.176, 15.239, 15.247, 15.265, 15.367, 15.418,
15.432, 15.480, 15.515, 15.531, 15.574, 15.626, 15.663, 15.681, 15.709,
0, 15.779, 15.895, 15.941, 16.012, 16.099, 16.193, 16.349, 16.430, 16.543,
16.605, 16.740, 16.748, 16.799, 0, 16.881, 16.904, 17.021, 17.051,
17.142, 17.206, 17.279, 17.474, 17.573, 0 ]

V = [13.990, 13.528, 13.178, 12.931, 12.707, 12.569, 12.417, 12.196,
12.128, 12.051, 12.016, 12.002, 11.994, 11.981, 12.000, 12.015, 12.035, 
12.060, 12.102, 12.141, 12.269, 12.324, 12.370, 12.464, 12.528, 12.612, 
12.692, 12.749, 12.890, 12.959, 13.022, 13.114, 13.171, 13.234, 13.308, 
13.382, 13.451, 13.418, 13.590, 13.674, 13.731, 13.806, 13.880, 13.966, 
14.104, 14.165, 14.229, 14.275, 14.330, 14.384, 14.423, 14.466, 14.492, 
14.548, 14.574, 14.642, 14.656, 14.677, 14.692, 14.718, 14.738, 14.774, 
14.881, 14.928, 14.992, 15.039, 15.057, 15.066, 15.085, 15.131, 15.152, 
15.152, 15.178, 15.198, 15.214, 15.231, 15.255, 15.269, 15.279, 15.296, 
15.313, 15.324, 15.389, 15.420, 15.464, 15.507, 15.535, 15.627, 15.676,
15.736, 15.772, 15.838, 15.870, 15.894, 0, 15.919, 15.942, 16.010, 
16.049, 16.102, 16.141, 16.181, 16.336, 16.392, 0 ]

#initializing empty arrays to store converted flux values 
uFlux = []

gFlux = []

rFlux = []

iFlux = []

BFlux = []

VFlux = []

#Conversion of magnitude to flux for u, g, r, i, B, V filters
for x in u:
    uFlux.append(859.5*10**-11*(math.exp(-x/2.5)))

print ("Magnitude to Flux conversion for u filter")
for x in uFlux:
    print(x)

for x in g:
    gFlux.append(466.9*10**-11*(math.exp(-x/2.5)))

print("\nMagnitude to Flux coversion for g filter")
for x in gFlux:
    print(x)

for x in r:
    rFlux.append(278.0*10**-11*(math.exp(-x/2.5)))

print("\nMagnitude to Flux conversion for r filter")
for x in rFlux:
    print(x)

for x in i:
    iFlux.append(184.2*10**-11*(math.exp(-x/2.5)))

print("\nMagnitude to Flux conversion for i filter")
for x in iFlux:
    print(x)

for x in B:
    BFlux.append(632*10**-11*(math.exp(-x/2.5)))

print ("\nMagnitude to Flux conversion for B filter")
for x in BFlux:
    print(x)

for x in V:
    VFlux.append(363.1*10**-11*(math.exp(-x/2.5)))

print ("\nMagnitude to Flux conversion for V filter")
for x in VFlux:
    print(x)

# defining luminosity distance
d = 5.54*10**25

#Conversion of the resultant flux from the above calculations into the luminosity for u, g, r, i, B, V filters
uLuminosity=[]

for x in uFlux:
      uLuminosity.append(x*4*math.pi*d**2)
      
print("\n Total uFlux to uLuminosity conversion:")
for x in uLuminosity:
    print(x)
logUL=np.log10(uLuminosity)

gLuminosity=[]

for x in gFlux:
      gLuminosity.append(x*4*math.pi*d**2)
      
print("\n Total gFlux to gLuminosity coversion:")
for x in gLuminosity:
    print(x)
logGL=np.log10(gLuminosity)

rLuminosity=[]

for x in rFlux:
      rLuminosity.append(x*4*math.pi*d**2)
      
print("\n Total rFlux to rLuminosity conversion:")
for x in rLuminosity:
    print(x)

iLuminosity=[]

for x in iFlux:
      iLuminosity.append(x*4*math.pi*d**2)
      
print("\n Total iFlux to iLuminosity conversion:")
for x in iLuminosity:
    print(x)

BLuminosity=[]

for x in BFlux:
      BLuminosity.append(x*4*math.pi*d**2)
      
print("\n Total BFlux to BLuminosity conversion:")
for x in BLuminosity:
    print(x)

VLuminosity=[]

for x in VFlux:
      VLuminosity.append(x*4*math.pi*d**2)
      
print("\n Total VFlux to VLuminosity conversion:")
for x in VLuminosity:
    print(x)

#phase time values 
t=[-12.4, -11.4, -10.4, -9.48, -8.44, -7.50, -6.41, -4.38, -3.43, -1.43, -0.46, 0.53, 1.55, 2.51,
   3.53, 4.55, 5.52, 6.56, 7.57, 8.53, 9.58, 10.51, 11.54, 12.57, 13.50, 14.50, 15.52, 16.49, 18.52,
   19.55, 20.55, 21.59, 22.53, 23.54, 24.55, 25.64, 26.68, 27.64, 28.64, 29.64, 30.61, 31.59, 32.62, 
   33.65, 35.51, 36.64, 37.63, 38.57, 39.66, 40.58, 41.62, 42.55, 43.55, 45.63, 46.50, 49.55, 50.59,
   51.58, 52.56, 53.50, 54.57, 56.59, 62.50, 65.45, 68.51, 71.49, 72.53, 73.46, 74.48, 77.47, 78.46,
   79.49, 80.52, 81.47, 82.46, 83.49, 84.46, 85.47, 86.46, 87.45, 88.43, 89.42, 93.46, 94.47, 97.47, 
   100.47, 103.50, 108.48, 111.45, 114.45, 117.41, 121.43, 123.41, 125.41, 126.41, 127.45, 129.40, 
   133.40, 136.42, 139.39, 142.39, 145.38, 155.38, 160.37, 169.36]

#defining effective central wavelenght
lambdac=[0.356, 0.438, 0.483, 0.545, 0.626, 0.767]

phday1= uLuminosity[0]
phday1=np.append(phday1, BLuminosity[0])
phday1=np.append(phday1, gLuminosity[0])
phday1=np.append(phday1, VLuminosity[0])
phday1=np.append(phday1, rLuminosity[0])
phday1=np.append(phday1, iLuminosity[0])

#Print the Luminosity vs effective wavelength curves for all the individual filters FOR PHASE DAY 1
plt.figure()
plt.scatter(lambdac, phday1)
plt.plot(lambdac, phday1,  color='r')
plt.title('Luminosity - Mean effective wavelength Relationship PD1')
plt.xlabel('Mean effective wavelength')
plt.ylabel('Luminosity')
plt.legend()
plt.show()

phday2= uLuminosity[1]
phday2=np.append(phday2, BLuminosity[1])
phday2=np.append(phday2, gLuminosity[1])
phday2=np.append(phday2, VLuminosity[1])
phday2=np.append(phday2, rLuminosity[1])
phday2=np.append(phday2, iLuminosity[1])

#Print the Luminosity vs effective wavelength curves for all the individual filters FOR PHASE DAY 2
plt.figure()
plt.scatter(lambdac, phday2)
plt.plot(lambdac, phday2,  color='r')
plt.title('Luminosity - Mean effective wavelength Relationshi PD2')
plt.xlabel('Mean effective wavelength')
plt.ylabel('Luminosity')
plt.legend()
plt.show()

phday3= uLuminosity[2]
phday3=np.append(phday3, BLuminosity[2])
phday3=np.append(phday3, gLuminosity[2])
phday3=np.append(phday3, VLuminosity[2])
phday3=np.append(phday3, rLuminosity[2])
phday3=np.append(phday3, iLuminosity[2])

#Print the Luminosity vs effective wavelength curves for all the individual filters FOR PHASE DAY 3
plt.figure()
plt.scatter(lambdac, phday3)
plt.plot(lambdac, phday3,  color='r')
plt.title('Luminosity - Mean effective wavelength Relationship PD3')
plt.xlabel('Mean effective wavelength')
plt.ylabel('Luminosity')
plt.legend()
plt.show()
